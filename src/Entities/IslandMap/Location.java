package Entities.IslandMap;

import Entities.Animals.Carnivores.*;
import Entities.Animals.Herbivores.*;
import Entities.Animals.Omnivores.*;
import Entities.Animals.Animal;
import SimulationCore.AnimalSimulationTask;
import SimulationCore.PlantGrowthTask;
import UtilityClasses.ProjectSettings;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Location { // –û—Ç–¥–µ–ª—å–Ω–∞—è "–ª–æ–∫–∞—Ü–∏—è" –æ—Å—Ç—Ä–æ–≤–∞
    private final ExecutorService threadPool = Executors.newFixedThreadPool(4);
    private final int coordinate_X;
    private final int coordinate_Y;
    private volatile double plant; // –†–∞—Å—Ç–µ–Ω–∏—è "–ª–æ–∫–∞—Ü–∏–∏"
    private final List<Location> neighboringLocations = new ArrayList<>(); // –°–æ—Å–µ–¥–Ω–∏–µ "–ª–æ–∫–∞—Ü–∏–∏"
    private final Map<Class<? extends Animal>, Set<Animal>> animals = new ConcurrentHashMap<>(); // –ñ–∏–≤–æ—Ç–Ω—ã–µ "–ª–æ–∫–∞—Ü–∏–∏"
    private final Lock lock = new ReentrantLock(true);

    public Location(int y, int x) {
        this.coordinate_Y = y;
        this.coordinate_X = x;
    }

    public void start() { // –ñ–∏–≤–æ—Ç–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ "–∂–∏–≤—É—Ç", —Ä–∞—Å—Ç–µ–Ω–∏—è "—Ä–∞—Å—Ç—É—Ç"
        lock.lock();
        try {
            for (Class<? extends Animal> animalClass : animals.keySet()) {
                for (Animal animal : animals.get(animalClass)) {
                    threadPool.submit(new AnimalSimulationTask(animal, this));
                }
            }
            threadPool.submit(new PlantGrowthTask(this));
        } finally {
            lock.unlock();
        }
    }

    public void await(int milliseconds) throws InterruptedException {
        threadPool.awaitTermination(milliseconds, TimeUnit.MILLISECONDS);
    }

    public void shutdown() {
        threadPool.shutdown();
    }

    public void removeAnimal(Animal animal) { // –£–¥–∞–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ this –ª–æ–∫–∞—Ü–∏–∏
        animals.get(animal.getClass()).remove(animal);
    }

    public void addAnimalToLocation(Animal animal) { // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ this –ª–æ–∫–∞—Ü–∏–∏
        if (isThereEnoughSpace(animal.getClass())) {
            animals.get(animal.getClass()).add(animal);
        }
    }

    public boolean isThereEnoughSpace(Class<? extends Animal> animalClass) { // –ï—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        return animals.get(animalClass).size() < ProjectSettings.ANIMAL_PARAMETERS.get(animalClass)[1]; // 1 == maxNumber
    }

    public void plantGrowth() { // –õ–æ–≥–∏–∫–∞ —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ this –ª–æ–∫–∞—Ü–∏–∏
        getLock().lock();
        try {
            double plantGrowth = ProjectSettings.GROWTH_OF_PLANT;
            double newPlantValue = this.plant + plantGrowth;
            this.plant = Math.min(newPlantValue, ProjectSettings.MAX_AMOUNT_OF_PLANT_ON_ONE_CELL);
        } finally {
            getLock().unlock();
        }
    }

    @Override
    public String toString() { // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è this –ª–æ–∫–∞—Ü–∏–∏
        StringBuilder sb = new StringBuilder();
        sb.append("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–æ–∫–∞—Ü–∏–∏: [").append(coordinate_X).append(", ").append(coordinate_Y).append("]\n");

        // –ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
        sb.append("–ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏:\n");
        for (Class<? extends Animal> animalClass : animals.keySet()) {
            int animalCount = animals.get(animalClass).size();
            if (animalCount > 0) {
                String animalName = animalClass.getSimpleName();
                sb.append("\t").append(animalName).append(": ").append(animalCount).append(" ").append(getAnimalEmoji(animalName)).append("\n");
            }
        }

        // –†–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏
        sb.append("–†–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: ").append(String.format("%.2f", plant)).append(" ").append("üåø").append("\n\n");

        return "[" + "üêª" + animals.get(Bear.class).size()
                + "üêç" + animals.get(Snake.class).size()
                + "üêó" + animals.get(Boar.class).size()
                + "üêÉ" + animals.get(Buffalo.class).size()
                + "ü¶å" + animals.get(Deer.class).size()
                + "ü¶ä" + animals.get(Fox.class).size()
                + "üêê" + animals.get(Goat.class).size()
                + "üêé" + animals.get(Horse.class).size()
                + "üêÅ" + animals.get(Mouse.class).size()
                + "üêá" + animals.get(Rabbit.class).size()
                + "üêë" + animals.get(Sheep.class).size()
                + "üê∫" + animals.get(Wolf.class).size()
                + "ü¶Ü" + animals.get(Duck.class).size()
                + "ü¶Ö" + animals.get(Eagle.class).size()
                + "üêõ" + animals.get(Caterpillar.class).size()
                + "üåø" + String.format("%.2f", plant) + "]\n"
                + sb;
    }

    private String getAnimalEmoji(String animalName) { // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–∞–π–ª–∏–∫–∞ –ø–æ "–∏–º–µ–Ω–∏" –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        return switch (animalName) {
            case "Bear" -> "üêª";
            case "Snake" -> "üêç";
            case "Boar" -> "üêó";
            case "Buffalo" -> "üêÉ";
            case "Deer" -> "ü¶å";
            case "Fox" -> "ü¶ä";
            case "Goat" -> "üêê";
            case "Horse" -> "üêé";
            case "Mouse" -> "üêÅ";
            case "Rabbit" -> "üêá";
            case "Sheep" -> "üêë";
            case "Wolf" -> "üê∫";
            case "Duck" -> "ü¶Ü";
            case "Eagle" -> "ü¶Ö";
            case "Caterpillar" -> "üêõ";
            default -> "";
        };
    }

    public Lock getLock() {
        return lock;
    }

    public Map<Class<? extends Animal>, Set<Animal>> getAnimals() {
        return animals;
    }

    public List<Location> getNeighboringLocations() {
        return neighboringLocations;
    }

    public double getPlant() {
        return plant;
    }

    public void setPlant(double plant) {
        this.plant = plant;
    }

    public int getCoordinate_X() {
        return coordinate_X;
    }

    public int getCoordinate_Y() {
        return coordinate_Y;
    }
}
